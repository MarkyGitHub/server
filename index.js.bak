import "dotenv/config";
// Server declarations
<<<<<<< .mine
||||||| .r36406

=======
import cookie from 'cookie';
>>>>>>> .r36422
import { ApolloServer } from '@apollo/server';
import { ApolloServerPluginLandingPageLocalDefault, ApolloServerPluginLandingPageProductionDefault } from '@apollo/server/plugin/landingPage/default';
import { ApolloServerPluginInlineTrace } from "@apollo/server/plugin/inlineTrace";
import { expressMiddleware } from '@apollo/server/express4';

// App declarations
import express from 'express';
import cors from 'cors';
import pkg from 'body-parser';
const { json } = pkg;
import { constraintDirectiveTypeDefs, constraintDirectiveDocumentation } from 'graphql-constraint-directive';
import { makeExecutableSchema } from '@graphql-tools/schema';

// Rest data source delarations
import LoginAPI from "./services/rest/LoginAPI.js";
import PromoterActivitiesAPI from './services/rest/PromoterActivitiesAPI.js';

//Logger
import winston from 'winston';
const { format, transports, createLogger, combine } = winston;
const { CATEGORY } = "VertriebsApp format";
const { timestamp, label, printf, prettyPrint } = format;

// GraphQL types, etc. declarations
import typeDefs from './graphql/schema.js';
import resolvers from './graphql/resolvers.js';

// Error handling
import { ApolloServerErrorCode } from '@apollo/server/errors';

const myPlugin = {
  // Fires whenever a GraphQL request is received from a client.
  async requestDidStart ( contextValue )
  {
    return {
      // Fires whenever Apollo Server will parse a GraphQL
      // request to create its associated document AST.
      async parsingDidStart ( contextValue )
      {
        console.log( "Parsing started!" );
      },

      // Fires whenever Apollo Server will validate a
      // request's document AST against your GraphQL schema.
      async validationDidStart ( contextValue )
      {
        console.log( "Validation started!" );
      },
      // Fires whenever Apollo Server will have errors
      async didEncounterErrors ( errors )
      {
        console.log( errors );
        console.log( "Request has errors! Errors:\n" + errors.extensions );
        if ( errors.extensions?.code === ApolloServerErrorCode.INTERNAL_SERVER_ERROR )
        {
          //GraphQLError.extensions.code
          console.log( 'Request has internal server errors! Errors:\n' + errors );
        } else if ( errors.extensions?.code === 'ECONNREFUSED' )
        {
          console.log( 'Request has errors! Errors:\n ECONNREFUSED' + errors );

        }
        console.log( "Request has errors! Errors:\n" + errors );
      }
    };
  }
};

const logger = winston.createLogger( {
  level: "info",

  transports: [
    new transports.File( {
      filename: "./log/error.log",
      level: "error"
    } ),
    new transports.File( {
      filename: "./log/combined.log",
      level: "verbose"
    } ),
    new transports.Console()
  ]
} );

const isProduction = process.env.NODE_ENV === "production";
const aOrigin = process.env.yourOrigin;
const restURL = isProduction ? process.env.pwabackend_prod : process.env.pwabackend_dev;

// Define your CORS settings for development
const corsOptionsDev = {
  origin: [
    aOrigin,
    "https://studio.apollographql.com",
    "http://localhost:3000",
    "http://v50gf.ibry-it.local:4000/",
    "http://localhost:5173",
    "https://mogo.ibry-it.local/vertrieb-app",
    "https://v50gf.ibry-it.local:8095",
    "https://v50gf.ibry-it.local:8181",
  ], // replace with the domain of your client
  credentials: true // <-- REQUIRED backend setting
};

// Define your CORS settings for production
const corsOptionsProd = {
  origin: [ "https://morgengold.de", "https://www.morgengold.de" ],
  credentials: true // <-- REQUIRED backend setting
};

//Make Schema validation
let schema = makeExecutableSchema( {
  typeDefs: [ constraintDirectiveTypeDefs, typeDefs ]
} );

// Set up Apollo Server 4
const server = new ApolloServer( {
  typeDefs,
  resolvers,
  introspection: true,
  csrfPrevention: true,
  cache: "bounded",
  cors: {
    ...( isProduction ? corsOptionsProd : corsOptionsDev )
  },
  plugins: [
    {
      async serverWillStart ()
      {
        console.log( "Server Bry-IT starting up...." );
      }
    },
    ...( isProduction
      ? [ ApolloServerPluginLandingPageProductionDefault( { embed: false } ) ]
      : [ ApolloServerPluginLandingPageLocalDefault( { embed: true } ) ] ), // disable in production
    ApolloServerPluginInlineTrace(),
    myPlugin
  ]
} );

// Start the server
await server.start();

// Give out customized error messages
schema = constraintDirectiveDocumentation(
  {
    header: '*Changed header:*',
    descriptionsMap: {
      minLength: 'Changed Minimum length',
      maxLength: 'Changed Maximum length',
      startsWith: 'Changed Starts with',
      endsWith: 'Changed Ends with',
      contains: 'Changed Contains',
      notContains: 'Changed Doesn\'t contain',
      pattern: 'Changed Must match RegEx pattern',
      format: 'Changed Must match format',
      min: 'Changed Minimum value',
      max: 'Changed Maximum value',
      exclusiveMin: 'Changed Grater than',
      exclusiveMax: 'Changed Less than',
      multipleOf: 'Changed Must be a multiple of',
      minItems: 'Changed Minimum number of items',
      maxItems: 'Changed Maximum number of items'
    }
  }
)( schema );

// Format Error messages as needed
const formatError = function ( error )
{
  const code = error?.originalError?.originalError?.code || error?.originalError?.code || error?.code
  if ( code === 'ERR_GRAPHQL_CONSTRAINT_VALIDATION' || 'BAD_USER_INPUT' )
  {
    // return a custom object
  }

  return error
}

const app = express();

app.use(
  '/graphql',
<<<<<<< .mine
  cors( isProduction ? corsOptionsProd : corsOptionsDev ),
||||||| .r36406
  cors(),
=======
  //cors(),
>>>>>>> .r36422
  json(),
<<<<<<< .mine
  formatError,
  expressMiddleware( server, {
    context: async ( { req, res } ) =>
    {
      console.log( req );
      const loginAPI = new LoginAPI( restURL, req );
      const promoterActivitiesAPI = new PromoterActivitiesAPI( restURL, req );
||||||| .r36406
  expressMiddleware(server, {
    context: async ({ req, res }) => {
      const loginAPI = new LoginAPI(restURL, req);
      const promoterActivitiesAPI = new PromoterActivitiesAPI(restURL, req);
=======
  expressMiddleware(server, {
    context: async ({ req, res }) => {
      const cookies = cookie.parse(req.headers.cookie || '');
      const jwtToken = cookies.jwtToken;
      const loginAPI = new LoginAPI(restURL, req);
      const promoterActivitiesAPI = new PromoterActivitiesAPI(restURL, req, jwtToken);
>>>>>>> .r36422
      return {
        request: req,
        response: res,
        dataSources: {
          loginAPI,
          promoterActivitiesAPI,
        },
      };
    },
  } ),
);

app.listen( { port: 4000 }, () =>
{
  console.log( `Server ready at ${ aOrigin }` );
  console.log( `Backend ready at ${ restURL }` );
  logger.log( {
    level: "info",
    message: `Server ready at ${ app.get( URL ) }`
  } );
} );
